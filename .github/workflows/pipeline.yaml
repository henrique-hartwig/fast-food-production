name: 'Terraform Deploy'

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master

env:
  AWS_REGION: us-east-1
  DB_HOST: nada
  DB_NAME: fast_food_production
  DB_PORT: 5432
  DB_USER: postgres
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  DATABASE_URL: postgresql://postgres:${{ secrets.DB_PASSWORD }}@nada:5432/fast_food_production?schema=public

jobs:
  terraform-validate:
    name: 'Build and deploy'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Pipeline dependencies
        run: npm ci

      - name: Install Lambda Layer dependencies
        working-directory: terraform/modules/lambda_layer/dependencies/nodejs
        run: |
          npm install

      - name: Generate Prisma Client Lambda Layer
        working-directory: terraform/modules/lambda_layer/
        run: |
          npx prisma generate --schema=../../../src/database/prisma/schema.prisma

      - name: Generate Dependencies Lambda Layer zip file
        working-directory: terraform/modules/lambda_layer/dependencies
        run: |
          zip -rq fastfood-production-lambda-layer.zip nodejs
          echo "Dependencies Lambda Layer generated in fastfood-production-lambda-layer.zip"
          echo "Size of the zip file: $(du -h fastfood-production-lambda-layer.zip | cut -f1)"

      - name: Generate Prisma Lambda Layer zip file
        working-directory: terraform/modules/lambda_layer/prisma
        run: |
          zip -rq fastfood-production-lambda-layer-prisma.zip nodejs
          echo "Prisma Lambda Layer generated in fastfood-production-lambda-layer-prisma.zip"
          echo "Size of the zip file: $(du -h fastfood-production-lambda-layer-prisma.zip | cut -f1)"

      - name: Build application
        run: npm run build

      - name: Package Lambda functions
        run: npm run package:lambda

      - name: Prisma Migrate
        run: npx prisma migrate dev --schema=./src/database/prisma/schema.prisma

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Configure Terraform variables
        env:
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          echo "TF_VAR_db_username=${{ env.DB_USER }}" >> $GITHUB_ENV
          echo "TF_VAR_db_password=$DB_PASSWORD" >> $GITHUB_ENV
          echo "TF_VAR_environment=dev" >> $GITHUB_ENV
          echo "TF_VAR_database_url=${{ env.DATABASE_URL }}" >> $GITHUB_ENV

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.7.0"

      - name: Terraform Init
        run: |
          cd terraform
          if [ -f backend.conf ]; then
            terraform init -backend-config=backend.conf
          else
            terraform init
          fi

      - name: Terraform Validate
        run: cd terraform && terraform validate

      - name: Terraform Format
        id: fmt
        run: cd terraform && terraform fmt -check
        continue-on-error: true

      - name: Terraform Plan
        id: plan
        run: cd terraform && terraform plan -no-color -input=false -out=tfplan

      - name: Update Pull Request
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style ðŸ–Œ\`${{ steps.fmt.outcome }}\`
            #### Terraform Plan ðŸ“–\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            
            </details>`;
              
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Check plan status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve tfplan
